## CMPT 315 GROUP PROJECT
## Proposed Schema
## Car Rental Company

## Justifications in comments
## Proposed validations noted


from django.db import models
from django.core.validators import validate_email

class Customer(models.Model):
    ID = models.AutoField(primary_key=True)             
        # autogenerated
    FirstName = models.CharField(max_length=255)        
        # max length as default
        # VALIDATION: Not nullable
    LastName = models.CharField(max_length=255)         
        # max length as default
        # VALIDATION: Not nullable
    DriversLicense = models.CharField(max_length=15)    
        # max drivers license len in canada https://en.wikipedia.org/wiki/Driver%27s_licences_in_Canada
        # things like drivers license are considered strings here and not ints because we are more likely
        # to do things like string comparisons instead of math operations on them
        # VALIDATION: Not nullable
    Email = models.EmailField()                         
        # self explanatory
    Customer_Phone = models.CharField(max_length=15)    
        # https://stackoverflow.com/questions/723587/whats-the-longest-possible-worldwide-phone-number-i-should-consider-in-sql-varc
    DOB = models.DateField()                            
        # self explanatory
        # VALIDATION: must be over [age]
        # VALIDATION: Not nullable
    GoldMember = models.BooleanField()                  
        # is or is not (1,0) a member
        # VALIDATION: Not nullable
    Province = models.CharField(max_length=2)           
        # 2 len for acronym, GUI could use a selector
        # VALIDATION: enum of provinces (AB,BC,SK,...)
    City = models.CharField(max_length=50)              
        # reasonable length
    PostalCode = models.CharField(max_length=6)         
        # VALIDATION: against X#X#X#
    StreetNumber = models.CharField(max_length=20)      
        # reasonable length
    StreetName = models.CharField(max_length=50)        
        # reasonable length
    UnitNumber = models.CharField(max_length=20)        
        # reasonable length

class Employee(models.Model):
    ID = models.AutoField(primary_key=True)             
        # anything without a comment is already explained above
    FirstName = models.CharField(max_length=255)
        # VALIDATION: Not nullable
    LastName = models.CharField(max_length=255)
        # VALIDATION: Not nullable
    Email = models.EmailField()                
    Employee_Phone = models.CharField(max_length=15)
        # VALIDATION: Not nullable
    Password = models.CharField(max_length=255)
        # max as default
        # VALIDATION: Not nullable
    Salt = models.CharField(max_length=255)
        # max as default
        # VALIDATION: Not nullable
    Salary = models.IntegerField()
        # for math comparisons, ><= etc
        # VALIDATION: Not nullable
    Rank = models.CharField(max_length=50)
        # reasonable length
        # VALIDATION: Not nullable
    DOB = models.DateField
        # VALIDATION: I dont think the employee needs to be >age?
        # VALIDATION: Not nullable
    Province = models.CharField(max_length=2)
    City = models.CharField(max_length=50)
    PostalCode = models.CharField(max_length=6)
    StreetNumber = models.CharField(max_length=20)
    StreetName = models.CharField(max_length=50)
    UnitNumber = models.CharField(max_length=20)

class CarType(models.Model):
    TypeID = models.AutoField(primary_key=True)
    Description = models.CharField(max_length=255)      
        # max as default
        # VALIDATION: Not nullable
    DailyCost = models.DecimalField(decimal_places=2, max_digits=2)   
        # decimalfield of 2 places = $$
        # VALIDATION: Not nullable
    WeeklyCost = models.DecimalField(decimal_places=2, max_digits=2)  
        # $$
        # VALIDATION: Not nullable
    MonthlyCost = models.DecimalField(decimal_places=2, max_digits=2) 
        # $$
        # VALIDATION: Not nullable
    LateFee = models.DecimalField(decimal_places=2, max_digits=2)     
        # $$
        # VALIDATION: Not nullable
    ChangeBranchFee = models.DecimalField(decimal_places=2, max_digits=2)   
        # $$
        # VALIDATION: Not nullable

class Rental(models.Model):
    RentalID = models.AutoField(primary_key=True)
    DateFrom = models.DateField()
        # VALIDATION: Not nullable
        # self explanatory
    DateTo = models.DateField()
        # self explanatory
    DateReturned = models.DateField(default=None, blank=True, null=True)
        # self explanatory
    TotalCost = models.DecimalField(decimal_places=2, max_digits=2)
        # $$
        # PROPOSED CALCULATION: Car.MonthlyCost*((DateTo-DateFrom)//28) (assuming 28 day pricing mth) 
        #                       + Car.WeeklyCost*(((DateTo-DateFrom)%28)//7) (how many weeks remained)
        #                       + Car.DailyCost*(((DateTo-DateFrom)%7) (leftover days after weeks/mths done)
    LicensePlate = models.CharField(max_length=10)
        # VALIDATION: Not nullable
        # reasonable length
    GoldMember = models.BooleanField()
    CustomerID = models.IntegerField()
    PickupBranchID = models.IntegerField()
    DropoffBranchID = models.IntegerField()
    PaidOff = models.BooleanField()

class Branch(models.Model):
    BranchID = models.AutoField(primary_key=True)
        # I think it's fine to use the auto value as the branch ID.
        # if we wanted to separate them we can do that.
    PhoneNumber = models.CharField(max_length=15)
        # VALIDATION: Not nullable
    Province = models.CharField(max_length=2)
        # VALIDATION: Not nullable
    City = models.CharField(max_length=50)
        # VALIDATION: Not nullable
    PostalCode = models.CharField(max_length=6)
    StreetNumber = models.CharField(max_length=20)
    StreetName = models.CharField(max_length=50)
    UnitNumber = models.CharField(max_length=20)

class Car(models.Model):
    ID = models.AutoField(primary_key=True)             
        # added this one, not sure if it was in the spec
        # This could be the VIN, or VIN could be some other non-nullable field
    Manufacturer = models.CharField(max_length=20)
        # VALIDATION: Not nullable      
        # reasonable length
    Model = models.CharField(max_length=20)
        # VALIDATION: Not nullable             
        # reasonable length
    #Year = models.IntegerField()
        # Proposed field - does not exist
        # VALIDATION: Not nullable
        # integer for math comparison (><= etc)
    FuelType = models.CharField(max_length=6)
        # VALIDATION: enum of fuels (gas, diesel, elec, hybrid, other?)
    Colour = models.CharField(max_length=10)
        # I want to use a hex value here but the right thing to do is a string[10]
        # accommodates things like aquamarine and chartreuse
    LicencePlate = models.CharField(max_length=10)
    Status = models.CharField(max_length=10)
        # VALIDATION: enum of statuses (available, rented, repair, new, etc?)
        # VALIDATION: Not nullable   
    Mileage = models.IntegerField()
        # int for math operations (><= etc)
        # VALIDATION: Not nullable  
    CarTypeID = models.IntegerField()